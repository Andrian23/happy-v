generator client {
  provider     = "prisma-client-js"
  clientImport = "prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(cuid())
  lastName                  String?
  email                     String?               @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  type_proffesion           String?
  place_work                String?
  practical_size            String?
  role                      UserRole              @default(USER)
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  isTwoFactorEnable         Boolean               @default(false)
  name                      String?
  telephone                 String?
  defaultShippingAddress    Int?
  stripeCustomerId          String?
  commissionRate            Float                 @default(0.15)
  isVerified                Boolean               @default(false)
  lastActiveAt              DateTime?
  npiNumber                 String?               @unique
  referralCode              String?               @unique
  referralLink              String?               @unique
  totalCommissionEarned     Float                 @default(0)
  lastInactivityEmailSentAt DateTime?
  signUpStep3Completed      Boolean               @default(false)
  signUpStep4Completed      Boolean               @default(false)
  Commission                Commission[]
  likes                     Like[]
  PatientReferral           PatientReferral[]
  replies                   Reply[]
  shippingAddresses         ShippingAddress[]
  topics                    Topic[]
  TwoFactorConfimation      TwoFactorConfimation?
  accounts                  Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfimation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Topic {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  authorId  String
  content   String
  type      TopicType
  updatedAt DateTime  @updatedAt
  likes     Like[]
  replies   Reply[]
  author    User      @relation(fields: [authorId], references: [id])
}

model Reply {
  id            String   @id @default(cuid())
  content       String
  createdAt     DateTime @default(now())
  topicId       String
  authorId      String
  parentReplyId String?
  likes         Like[]
  author        User     @relation(fields: [authorId], references: [id])
  parentReply   Reply?   @relation("ReplyToReply", fields: [parentReplyId], references: [id])
  childReplies  Reply[]  @relation("ReplyToReply")
  topic         Topic    @relation(fields: [topicId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  topicId   String?
  replyId   String?
  createdAt DateTime @default(now())
  reply     Reply?   @relation(fields: [replyId], references: [id])
  topic     Topic?   @relation(fields: [topicId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, topicId])
  @@unique([userId, replyId])
}

model CartOrder {
  id              Int      @id @default(dbgenerated("(floor(((random() * (900000)::double precision) + (100000)::double precision)))::integer"))
  userId          String
  createdAt       DateTime @default(now())
  email           String
  shippingAddress Json
  billingAddress  Json
  paymentMethod   String
  products        Json
  totalPrice      Float
  status          String
  shippingMethod  Json
}

model Recommendation {
  id               String   @id @default(cuid())
  userId           String
  basicInfo        Json
  clients          Json
  created          DateTime @default(now())
  discount         Int
  selectedProducts Json
  status           String
}

model Template {
  id               String   @id @default(cuid())
  userId           String
  basicInfo        Json
  created          DateTime @default(now())
  discount         Int
  selectedProducts Json
  status           String
}

model Ambassador {
  id              String   @id @default(cuid())
  userId          String
  selectedTitles  Json
  ambassadorLinks Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  status          String   @default("no-active")
}

model MarketingAssets {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
  format    String
  type      String
  title     String
}

model SocialAssets {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
  type      String
  title     String
}

model ShippingAddress {
  id             Int     @id @default(autoincrement())
  userId         String
  firstName      String
  lastName       String
  address        String
  apartmentSuite String?
  country        String
  stateProvince  String
  city           String
  postalZipCode  String
  phone          String
  email          String
  user           User    @relation(fields: [userId], references: [id])
}

model Commission {
  id                String           @id
  doctorId          String
  patientReferralId String
  shopifyOrderId    String
  amount            Float
  orderTotal        Float
  status            CommissionStatus @default(PENDING)
  orderDate         DateTime         @default(now())
  paidAt            DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  User              User             @relation(fields: [doctorId], references: [id])
  PatientReferral   PatientReferral  @relation(fields: [patientReferralId], references: [id])

  @@unique([doctorId, shopifyOrderId])
}

model PatientReferral {
  id           String       @id
  doctorId     String
  patientEmail String
  cookieId     String?
  referredAt   DateTime     @default(now())
  Commission   Commission[]
  User         User         @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, patientEmail])
}

enum UserRole {
  ADMIN
  USER
}

enum TopicType {
  ASK
  SUGGESTION
  NEWS
}

enum CommissionStatus {
  PENDING
  PAID
  CANCELLED
}
